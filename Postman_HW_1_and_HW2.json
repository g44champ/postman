{
	"info": {
		"_postman_id": "9c92bf30-6b99-417f-ae47-278f0232ab88",
		"name": "Group_33",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26310431"
	},
	"item": [
		{
			"name": "/get_method",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name=Anton&age=26",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Anton"
						},
						{
							"key": "age",
							"value": "26"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var responceData=pm.response.json(); \r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"req_resp_name_check_hand\", function () {\r",
							"    var resp_name=responceData.name;\r",
							"    pm.expect(resp_name).to.eql(\"Anton\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"req_resp_age_check_hand\", function (){ \r",
							"    var resp_age=+responceData.age; // \"+\" перед responceData.age преобразует строку в число\r",
							"    pm.expect(resp_age).to.eql(26);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"req_resp_salary_check_hand\", function(){ \r",
							"var resp_salary=+responceData.salary; // \"+\" перед responceData.salary преобразует строку в число\r",
							"pm.expect(resp_salary).to.eql(1111);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req=request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_resp_name_check\", function () { \r",
							"var req_name=req.name; \r",
							"var resp_name=responceData.name; \r",
							"     pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"resp_req_age_check\", function(){ \r",
							"    var req_age=req.age;\r",
							"    var resp_age=responceData.age;\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"resp_req_salary_check\", function(){ \r",
							"    var req_salary=+req.salary; // \"+\" перед req.salary преобразует строку в число\r",
							"    var resp_salary=responceData.salary;\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var resp_family=responceData.family; \r",
							"console.log(resp_family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salarycheck\", function () {\r",
							"    var response_salary15 = responceData.family.u_salary_1_5_year;\r",
							"    var req_salary=req.salary*4;\r",
							"    pm.expect(response_salary15).to.eql(req_salary);\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anton",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1111",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=Anton&age=26&weight=75",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Anton"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "weight",
							"value": "75"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name=Anton&age=26&salary=1111",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Anton"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var responsedata=pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var reqdata = pm.request;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_req_name_check\", function () {\r",
							"    var reqname=reqdata.url.query.get(\"name\");\r",
							"    var respname=responsedata.name;\r",
							"    pm.expect(respname).to.eql(reqname);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"resp_req_age_check\", function(){\r",
							"    var respage=responsedata.age;\r",
							"    var reqage=reqdata.url.query.get(\"age\");\r",
							"    pm.expect(respage).to.eql(reqage);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"resp_req_salary_check\", function(){\r",
							"    var respsalary=responsedata.salary;\r",
							"    var reqsalary=+reqdata.url.query.get(\"salary\");\r",
							"    pm.expect(respsalary).to.eql(reqsalary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"var respfamily=responsedata.family;\r",
							"console.log(respfamily);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_have_name\", function() {\r",
							"    pm.expect(responsedata.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_have_age\", function() {\r",
							"    pm.expect(responsedata.family.pets.dog). to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"dogname_have_Luky\", function (){\r",
							"    pm.expect(responsedata.family.pets.dog.name).hasOwnProperty(\"Luky\");\r",
							"    });\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"dogage_have_4\", function(){\r",
							"    pm.expect(responsedata.family.pets.dog.age).hasOwnProperty(\"4\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Anton&age=26&salary=1123",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anton"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var responsedata=pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var requestdata=pm.request;\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_req_name_check\", function () {\r",
							"    var respname=responsedata.name;\r",
							"    var reqname=requestdata.url.query.get(\"name\");\r",
							"    pm.expect(respname).to.eql(reqname);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"resp_req_age_check\", function(){\r",
							"    var respage=responsedata.age;\r",
							"    var reqage=+requestdata.url.query.get(\"age\");\r",
							"    pm.expect(respage).to.eql(reqage);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestdata.url.query.get(\"salary\"));\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(responsedata.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responsedata.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responsedata.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responsedata.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary0=salary_request\", function () {\r",
							"    pm.expect(responsedata.salary[0]).to.eql(+requestdata.url.query.get(\"salary\"));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salalry_1=salary*2\", function () {\r",
							"    pm.expect(+responsedata.salary[1]).to.eql(requestdata.url.query.get(\"salary\")*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_2=salary*3\", function (){\r",
							"    pm.expect(+responsedata.salary[2]).to.eql(requestdata.url.query.get(\"salary\")*3)\r",
							"});\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", responsedata.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", responsedata.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", responsedata.salary[0]);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var a;\r",
							"for (a==0;a<3;a++) {\r",
							"    if (a==0) console.log(responsedata.salary[0]);\r",
							"    if (a==1) console.log(responsedata.salary[1]); \r",
							"    if (a==2) console.log(responsedata.salary[2]);\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Anton&age=26&salary=4323",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anton"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "4323"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var responsedata=pm.response.json();\r",
							"\r",
							"// 7. Спарсить request\r",
							"var requestdata=request.data;\r",
							"\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Body_have_start_qa_salary\", function () {\r",
							"    pm.expect(responsedata).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"jsonresp_have_argument\", function(){\r",
							"    pm.expect(responsedata).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"jsonresp_have_argument2\", function(){\r",
							"    pm.expect(responsedata).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"jsonresp_have_argument3\", function(){\r",
							"    pm.expect(responsedata).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json_resp_have_argument3\", function (){\r",
							"    pm.expect(responsedata).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"jsonresp_have_argument_person\", function (){\r",
							"    pm.expect(responsedata).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary_to_reqsalary\", function(){\r",
							"    pm.expect(responsedata.start_qa_salary).to.eql(+requestdata.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"argument_qasalaryafter6month_equal_to_salary*2\", function (){\r",
							"    pm.expect(responsedata.qa_salary_after_6_months).to.eql(requestdata.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_12_equal_salary*2.7\", function (){\r",
							"    pm.expect(responsedata.qa_salary_after_12_months).to.eql(requestdata.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_12_equal\", function (){\r",
							"    pm.expect(responsedata[\"qa_salary_after_1.5_year\"]).to.eql(requestdata.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"salary_arguments_sheck\", function (){\r",
							"    pm.expect(responsedata[\"qa_salary_after_3.5_years\"]).to.eql(requestdata.salary*3.8)\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_uname_equal_salary\", function (){\r",
							"    pm.expect(responsedata.person.u_name[1]).to.eql(+requestdata.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age_equal_requestage\", function (){\r",
							"    pm.expect(responsedata.person.u_age).to.eql(+requestdata.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"argument_equal_salary*4.2\", function(){\r",
							"    pm.expect(responsedata.person.u_salary_5_years).to.eql(requestdata.salary*4.2)\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var a=0;\r",
							"for (a==0;a<3;a++) {\r",
							"    if (a==0) console.log(responsedata.person.u_age);\r",
							"    if (a==0) console.log(responsedata.person.u_name);\r",
							"    if (a==0) console.log(responsedata.person.u_salary_5_years);\r",
							"    \r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body repsonse string\", function (){\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "age",
			"value": ""
		}
	]
}